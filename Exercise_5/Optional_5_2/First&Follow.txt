A: <prog>              A -> B EOF
B: <statlist>          B -> DC
C: <statlistp>         C -> ;DC | eps                                                                                                   null(C)
D: <stat>              D -> assign H to E | print (I) | read (E) | while (G) D | if (G) D P | { B }
P: <statp>             P -> end | else D end             
E: <idlist>            E -> MF
F: <idlistp>           F -> ,MF | eps  
G: <bexpr>             G -> N | O 
N: <bool>              N -> and Q Q | or Q Q | not Q        <-- This is the modified part of the grammar
O: <cond>              O -> relop H H
Q: <boolp>             Q -> O | N
H: <expr>              H -> +(I) | -HH | *(I) | /HH | NUM | M 
I: <exprlist>          I -> HL
L: <exprlistp>         L -> ,HL | eps                                                                                                   null(L)

                       con M = ID 

--------------------------------------------------------------------------------------------------------------------------------------------------

FIRST(A) = { assign, print, read, while, if, { }
FIRST(B) = { assign, print, read, while, if, { }
FIRST(C) = { ; }
FIRST(D) = { assign, print, read, while, if, { }
FIRST(P) = { end, else }
FIRST(E) = { ID }
FIRST(F) = { , }
FIRST(G) = { and, or, not, relop }
FIRST(N) = { and, or, not }
FIRST(O) = { relop }
FIRST(Q) = { and, or, not, relop }
FIRST(H) = { +, -, *, / NUM, ID }
FIRST(I) = { +, -, *, / NUM, ID }
FIRST(L) = { , }

--------------------------------------------------------------------------------------------------------------------------------------------------

FOLLOW(A) = { $ } 
FOLLOW(B) = { $, } } 
FOLLOW(C) = { $, } } 
FOLLOW(D) = { $, ;, end, else, } }
FOLLOW(P) = { $, ;, end, else, } } 
FOLLOW(E) = { $, ;, ), end, else, } } 
FOLLOW(F) = { $, ;, ), end, else, } }  
FOLLOW(G) = { ) } 
FOLLOW(N) = { ), and, or, not, relop }
FOLLOW(O) = { ), and, or, not, relop }
FOLLOW(Q) = { ), and, or, not, relop }
FOLLOW(H) = { to, ), ,, and, or, not, relop, +, -, *, /, NUM, ID} 
FOLLOW(I) = { ) } 
FOLLOW(L) = { ) } 

--------------------------------------------------------------------------------------------------------------------------------------------------

PREDICT(A -> B) = FIRST(B) = { assign, print, read, while, if, { } 
PREDICT(B -> DC) = FIRST(D) = { assign, print, read, while, if, { } 
PREDICT(C -> ;DC) = FIRST(;) = {;}
PREDICT(C -> eps) = FOLLOW(C) = { $, } }
PREDICT(D -> assign H to E) = FIRST(assign) = { assign }
PREDICT(D -> print (I)) = FIRST(print) = { print }
PREDICT(D -> read (E) ) = FIRST(read) = { read }
PREDICT(D -> while (G) D) = FIRST(while) = { while }
PREDICT(D -> if (G) D P ) = FIRST(if) = { if }
PREDICT(D -> { B }) = FIRST({) = { { }
PREDICT(P -> end) = FIRST(end) = { end }
PREDICT(P -> else D end) = FIRST(else) = { else }
PREDICT(E -> MF) = FIRST(M) = { ID }
PREDICT(F -> ,MF) = FIRST(,) = {,}
PREDICT(F -> eps) = FOLLOW(F) = { $, ;, ), end, else, } } 
PREDICT(G -> N) = { and, or, not }
PREDICT(G -> O) = { relop }
PREDICT(N -> and QQ) = { and }
PREDICT(N -> or QQ) = { or }
PREDICT(N -> not Q) = { not }
PREDICT(O -> relop HH) = { relop }
PREDICT(Q -> O) = { relop }
PREDICT(Q -> N) = { and, or, not }
PREDICT(H -> +(I)) = FIRST(+) = { + }
PREDICT(H -> -HH) = FIRST(-) = { - }
PREDICT(H -> *(I)) = FIRST(*) = { * }
PREDICT(H -> /HH) = FIRST(/) = { / }
PREDICT(H -> NUM) = FIRST(NUM) = { NUM }
PREDICT(H -> ID) = FIRST(ID) = { ID }
PREDICT(I -> HL) = FIRST(H) = { ID, +, -, *, / NUM } 
PREDICT(L -> ,HL) = FIRST(,) = { , }
PREDICT(L -> eps) = FOLLOW(L) = { ) }

It is a LL(1) grammar, because intersections of predict sets are all empty. 